generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String  @unique
  isBlacklisted Boolean @default(false) @map("is_blacklisted")

  @@map("userprofile")
}

model Course {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseCode  String
  courseTitle String
  createdAt   DateTime        @default(dbgenerated("now()")) @map("created_at")
  ///
  sections    CourseSection[]

  @@map("course")
}

model CourseSection {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String    @map("course_id") @db.Uuid
  section   String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  ///
  component Component
  timings   Timing[]
  rooms     Room[]
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("coursesection")
}

model Timing {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sectionId String        @map("section_id") @db.Uuid
  startTime String?       @map("start_time")
  endTime   String?       @map("end_time")
  ///
  days      Day[]
  section   CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("timing")
}

model Room {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sectionId String        @map("section_id") @db.Uuid
  name      String
  ///
  section   CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("room")
}

enum Component {
  LECTURE
  TUTORIAL
  PRACTICAL
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
